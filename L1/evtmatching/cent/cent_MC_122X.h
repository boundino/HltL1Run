const Double_t binTable[nBins+1] = {0, 12.0726, 12.9775, 13.7646, 14.6009, 15.4167, 16.2718, 17.1496, 18.0357, 18.933, 19.8565, 20.8485, 21.8614, 22.9305, 23.9966, 25.0743, 26.2168, 27.3867, 28.5948, 29.892, 31.1614, 32.5169, 33.96, 35.4747, 37.0106, 38.5893, 40.2316, 41.9823, 43.8428, 45.8105, 47.8386, 50.0019, 52.2309, 54.4736, 56.8414, 59.323, 61.9717, 64.7627, 67.6805, 70.6497, 73.7457, 76.9925, 80.1679, 83.6124, 87.1841, 90.8269, 94.685, 98.676, 102.906, 107.15, 111.736, 116.464, 121.338, 126.239, 131.41, 136.801, 142.322, 148.098, 154.006, 160.177, 166.526, 172.901, 179.823, 186.767, 194.153, 201.624, 209.203, 217.071, 225.281, 233.668, 242.615, 251.737, 261.417, 270.915, 280.69, 290.442, 301.228, 312.217, 322.842, 334.313, 346.203, 358.49, 370.721, 383.106, 396.469, 409.893, 423.605, 437.406, 451.505, 465.856, 481.029, 496.263, 512.126, 528.386, 544.806, 561.834, 579.189, 596.839, 614.239, 632.817, 651.443, 670.052, 689.384, 709.959, 729.154, 749.497, 770.253, 792.303, 813.733, 835.81, 858.891, 881.69, 906.947, 931.019, 955.307, 981.046, 1007.22, 1033.61, 1059.87, 1086.71, 1114.7, 1142.3, 1169.1, 1198.04, 1227.5, 1258.53, 1289.54, 1320.27, 1351.44, 1383.87, 1417.43, 1451.81, 1486.47, 1519.98, 1555.82, 1591.49, 1628.13, 1664.54, 1701.71, 1739.11, 1778.24, 1816.52, 1855.62, 1895.81, 1938.61, 1981.62, 2023.59, 2067.99, 2111.18, 2155.79, 2201.01, 2247.7, 2295.59, 2343.33, 2392.58, 2443.16, 2494.46, 2545.55, 2599.57, 2653.17, 2706.87, 2762.46, 2819.43, 2876.81, 2934.32, 2993.26, 3054.02, 3114.36, 3177.81, 3241.03, 3303.68, 3369.72, 3436.8, 3504.28, 3576.17, 3649.11, 3719.79, 3791.38, 3866.09, 3941.29, 4017.09, 4096.05, 4177.37, 4259.28, 4344.66, 4431.01, 4522.42, 4614.38, 4708.27, 4805.19, 4901.19, 5001.78, 5105.13, 5206.38, 5312.61, 5421.24, 5536.04, 5659.64, 5797.53, 5975.82, 7029.37};

Int_t getHiBinFromhiHF(const Double_t hiHF)
{
  Int_t binPos = -1;
  for(int i = 0; i < nBins; ++i){
    if(hiHF >= binTable[i] && hiHF < binTable[i+1]){
      binPos = i;
      break; 
    }
  }                   

  binPos = nBins - 1 - binPos;

  return (Int_t)(200*((Double_t)binPos)/((Double_t)nBins));
}


float findNpart(int hiBin) {
  const int nbins = 200;
  const float Npart[nbins] = {396.969, 391.99, 387.65, 383.028, 377.158, 371.675, 365.642, 359.632, 352.91, 347.424, 340.804, 335.716, 329.12, 323.716, 318.362, 312.617, 307.159, 301.942, 297.23, 291.695, 286.725, 281.793, 277.396, 272.222, 267.56, 263.218, 258.213, 253.739, 249.049, 245.06, 240.807, 236.815, 232.506, 228.813, 224.739, 220.483, 216.495, 212.482, 209.032, 205.336, 201.63, 197.756, 193.768, 190.619, 186.886, 183.815, 180.203, 177.091, 173.84, 170.327, 167.451, 164.124, 161.043, 157.822, 155.23, 152.103, 149.542, 146.389, 143.291, 140.577, 137.926, 134.905, 132.416, 129.894, 127.211, 124.693, 122.059, 120.079, 117.428, 114.502, 112.29, 109.747, 107.639, 105.216, 103.091, 100.597, 98.6848, 96.143, 94.5855, 92.4387, 90.2531, 88.314, 86.2531, 84.3322, 82.3947, 80.3975, 78.4355, 76.3298, 74.5867, 72.8961, 71.1539, 69.41, 67.8546, 66.0151, 64.1466, 62.7549, 61.0369, 59.8017, 58.0167, 56.6331, 55.1579, 53.5863, 52.4258, 50.7271, 49.1414, 47.9461, 46.6376, 45.3015, 44.0994, 42.7368, 41.5105, 40.2136, 39.2487, 38.1317, 36.8243, 35.7638, 34.5896, 33.496, 32.552, 31.4633, 30.5585, 29.3068, 28.4133, 27.5299, 26.6666, 25.7783, 24.8764, 24.0232, 23.1708, 22.4109, 21.5069, 20.6888, 20.0918, 19.452, 18.7432, 18.0095, 17.2781, 16.5924, 16.0373, 15.4556, 14.8723, 14.2491, 13.8816, 13.0518, 12.6121, 12.187, 11.6904, 11.1672, 10.7787, 10.2898, 9.80859, 9.41771, 9.01351, 8.6553, 8.34389, 8.02602, 7.65934, 7.31928, 7.00827, 6.7021, 6.36971, 6.13816, 5.84772, 5.5831, 5.34187, 5.09016, 4.8449, 4.59923, 4.4165, 4.16277, 3.93324, 3.78963, 3.57503, 3.35236, 3.18092, 2.98165, 2.85377, 2.70694, 2.48951, 2.35518, 2.2027, 2.0591, 1.94816, 1.81827, 1.67628, 1.58068, 1.45119, 1.32009, 1.2257, 1.08854, 0.971158, 0.865067, 0.749697, 0.669827, 0.606091, 0.559298, 0.531464, 0.510085, 0.507261, 0.500403};
  return Npart[hiBin];
}


float findNcoll(int hiBin) {
  const int nbins = 200;
  const float Ncoll[nbins] = {1919.78, 1885.19, 1856.99, 1825.04, 1784.78, 1746.71, 1703.82, 1662.5, 1616.36, 1579.02, 1534.86, 1501.37, 1458.44, 1423.87, 1389.69, 1353.63, 1319.72, 1287.51, 1258.84, 1225.49, 1195.78, 1166.55, 1140.71, 1110.7, 1083.73, 1058.86, 1030.54, 1005.22, 978.904, 956.635, 933.093, 911.224, 887.728, 867.682, 845.888, 823.128, 802.103, 780.984, 762.997, 743.821, 724.782, 705.008, 684.918, 669.106, 650.536, 635.356, 617.694, 602.554, 586.821, 569.964, 556.196, 540.463, 525.911, 510.929, 498.874, 484.433, 472.776, 458.498, 444.539, 432.389, 420.628, 407.479, 396.521, 385.629, 374.165, 363.421, 352.297, 344.028, 333.112, 321.054, 312.064, 301.815, 293.326, 283.747, 275.412, 265.697, 258.378, 248.661, 242.796, 234.84, 226.734, 219.617, 212.156, 205.325, 198.439, 191.398, 184.682, 177.485, 171.602, 165.937, 160.209, 154.521, 149.497, 143.61, 137.743, 133.381, 128.111, 124.338, 118.93, 114.865, 110.556, 106.003, 102.698, 97.8558, 93.4104, 90.1664, 86.6085, 83.0393, 79.8933, 76.3645, 73.2382, 70.0091, 67.5678, 64.8457, 61.7102, 59.1422, 56.4246, 53.8929, 51.7162, 49.3104, 47.3088, 44.6109, 42.6843, 40.8715, 39.0845, 37.3144, 35.425, 33.7925, 32.1438, 30.715, 29.0353, 27.5403, 26.4516, 25.3269, 24.0873, 22.8437, 21.6271, 20.4867, 19.5775, 18.638, 17.7247, 16.7578, 16.1765, 14.9389, 14.2802, 13.6783, 12.9599, 12.2249, 11.6932, 11.022, 10.3871, 9.86386, 9.32372, 8.85135, 8.46894, 8.07039, 7.62505, 7.19262, 6.82553, 6.45724, 6.0716, 5.80577, 5.45966, 5.17205, 4.88161, 4.62344, 4.36325, 4.11154, 3.89572, 3.65409, 3.39633, 3.26805, 3.04014, 2.83118, 2.67305, 2.47943, 2.34147, 2.18737, 1.99697, 1.88241, 1.76099, 1.64482, 1.53348, 1.42174, 1.27572, 1.19665, 1.07725, 0.934853, 0.859419, 0.754135, 0.683542, 0.604478, 0.557281, 0.541549, 0.52138, 0.507664, 0.503227, 0.50121, 0.5, 0.5};
  return Ncoll[hiBin];
}


float findNpartAverage(int hiBinLow, int hiBinHigh) {
  float w=0;
  const int nbins = 200;
  const float Npart[nbins] = {396.969, 391.99, 387.65, 383.028, 377.158, 371.675, 365.642, 359.632, 352.91, 347.424, 340.804, 335.716, 329.12, 323.716, 318.362, 312.617, 307.159, 301.942, 297.23, 291.695, 286.725, 281.793, 277.396, 272.222, 267.56, 263.218, 258.213, 253.739, 249.049, 245.06, 240.807, 236.815, 232.506, 228.813, 224.739, 220.483, 216.495, 212.482, 209.032, 205.336, 201.63, 197.756, 193.768, 190.619, 186.886, 183.815, 180.203, 177.091, 173.84, 170.327, 167.451, 164.124, 161.043, 157.822, 155.23, 152.103, 149.542, 146.389, 143.291, 140.577, 137.926, 134.905, 132.416, 129.894, 127.211, 124.693, 122.059, 120.079, 117.428, 114.502, 112.29, 109.747, 107.639, 105.216, 103.091, 100.597, 98.6848, 96.143, 94.5855, 92.4387, 90.2531, 88.314, 86.2531, 84.3322, 82.3947, 80.3975, 78.4355, 76.3298, 74.5867, 72.8961, 71.1539, 69.41, 67.8546, 66.0151, 64.1466, 62.7549, 61.0369, 59.8017, 58.0167, 56.6331, 55.1579, 53.5863, 52.4258, 50.7271, 49.1414, 47.9461, 46.6376, 45.3015, 44.0994, 42.7368, 41.5105, 40.2136, 39.2487, 38.1317, 36.8243, 35.7638, 34.5896, 33.496, 32.552, 31.4633, 30.5585, 29.3068, 28.4133, 27.5299, 26.6666, 25.7783, 24.8764, 24.0232, 23.1708, 22.4109, 21.5069, 20.6888, 20.0918, 19.452, 18.7432, 18.0095, 17.2781, 16.5924, 16.0373, 15.4556, 14.8723, 14.2491, 13.8816, 13.0518, 12.6121, 12.187, 11.6904, 11.1672, 10.7787, 10.2898, 9.80859, 9.41771, 9.01351, 8.6553, 8.34389, 8.02602, 7.65934, 7.31928, 7.00827, 6.7021, 6.36971, 6.13816, 5.84772, 5.5831, 5.34187, 5.09016, 4.8449, 4.59923, 4.4165, 4.16277, 3.93324, 3.78963, 3.57503, 3.35236, 3.18092, 2.98165, 2.85377, 2.70694, 2.48951, 2.35518, 2.2027, 2.0591, 1.94816, 1.81827, 1.67628, 1.58068, 1.45119, 1.32009, 1.2257, 1.08854, 0.971158, 0.865067, 0.749697, 0.669827, 0.606091, 0.559298, 0.531464, 0.510085, 0.507261, 0.500403};
  for(int i=hiBinLow; i<hiBinHigh; i++)  w+=Npart[i]/(hiBinHigh-hiBinLow);
  return w;
}


float findNcollAverage(int hiBinLow, int hiBinHigh) {
  float w=0;
  const int nbins = 200;
  const float Ncoll[nbins] = {1919.78, 1885.19, 1856.99, 1825.04, 1784.78, 1746.71, 1703.82, 1662.5, 1616.36, 1579.02, 1534.86, 1501.37, 1458.44, 1423.87, 1389.69, 1353.63, 1319.72, 1287.51, 1258.84, 1225.49, 1195.78, 1166.55, 1140.71, 1110.7, 1083.73, 1058.86, 1030.54, 1005.22, 978.904, 956.635, 933.093, 911.224, 887.728, 867.682, 845.888, 823.128, 802.103, 780.984, 762.997, 743.821, 724.782, 705.008, 684.918, 669.106, 650.536, 635.356, 617.694, 602.554, 586.821, 569.964, 556.196, 540.463, 525.911, 510.929, 498.874, 484.433, 472.776, 458.498, 444.539, 432.389, 420.628, 407.479, 396.521, 385.629, 374.165, 363.421, 352.297, 344.028, 333.112, 321.054, 312.064, 301.815, 293.326, 283.747, 275.412, 265.697, 258.378, 248.661, 242.796, 234.84, 226.734, 219.617, 212.156, 205.325, 198.439, 191.398, 184.682, 177.485, 171.602, 165.937, 160.209, 154.521, 149.497, 143.61, 137.743, 133.381, 128.111, 124.338, 118.93, 114.865, 110.556, 106.003, 102.698, 97.8558, 93.4104, 90.1664, 86.6085, 83.0393, 79.8933, 76.3645, 73.2382, 70.0091, 67.5678, 64.8457, 61.7102, 59.1422, 56.4246, 53.8929, 51.7162, 49.3104, 47.3088, 44.6109, 42.6843, 40.8715, 39.0845, 37.3144, 35.425, 33.7925, 32.1438, 30.715, 29.0353, 27.5403, 26.4516, 25.3269, 24.0873, 22.8437, 21.6271, 20.4867, 19.5775, 18.638, 17.7247, 16.7578, 16.1765, 14.9389, 14.2802, 13.6783, 12.9599, 12.2249, 11.6932, 11.022, 10.3871, 9.86386, 9.32372, 8.85135, 8.46894, 8.07039, 7.62505, 7.19262, 6.82553, 6.45724, 6.0716, 5.80577, 5.45966, 5.17205, 4.88161, 4.62344, 4.36325, 4.11154, 3.89572, 3.65409, 3.39633, 3.26805, 3.04014, 2.83118, 2.67305, 2.47943, 2.34147, 2.18737, 1.99697, 1.88241, 1.76099, 1.64482, 1.53348, 1.42174, 1.27572, 1.19665, 1.07725, 0.934853, 0.859419, 0.754135, 0.683542, 0.604478, 0.557281, 0.541549, 0.52138, 0.507664, 0.503227, 0.50121, 0.5, 0.5};
  for(int i=hiBinLow; i<hiBinHigh; i++)  w+=Ncoll[i]/(hiBinHigh-hiBinLow);
  return w;
}
